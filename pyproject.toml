[tool.poetry]
name = "sql-lint"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]

[tool.poetry.dependencies]
python = "^3.10"
sqlfluff = "^0.13.1"
black = "^22.3.0"
pyspark = "^3.2.1"
pandas = "^1.4.2"
polars = "^0.13.30"

[tool.poetry.dev-dependencies]
pytest = "^5.2"

[tool.sqlfluff.core]
# verbose is an integer (0-2) indicating the level of log output
verbose = 0
# Turn off color formatting of output
nocolor = false
# Supported dialects https://docs.sqlfluff.com/en/stable/dialects.html
# Or run 'sqlfluff dialects'
# dialect = "postgres"
# One of [raw|jinja|python|placeholder]
# templater = "python"
# The depth to recursively parse to (0 for unlimited)
recurse = 0
# Below controls SQLFluff output, see max_line_length for SQL output
output_line_length = 80
# Number of passes to run before admitting defeat
runaway_limit = 10
# Ignore linting errors found within sections of code coming directly from
# templated code (e.g. from within Jinja curly braces. Note that it does not
# ignore errors from literal code found within template loops.
ignore_templated_areas = true
# can either be autodetect or a valid encoding e.g. utf-8, utf-8-sig
encoding = "utf-8"
# Ignore inline overrides (e.g. to test if still required)
disable_noqa = false
# Comma separated list of file extensions to lint
# NB: This config will only apply in the root folder
sql_file_exts = ".sql,.sql.j2,.dml,.ddl"
# Allow fix to run on files, even if they contain parsing errors
# Note altering this is NOT RECOMMENDED as can corrupt SQL
fix_even_unparsable = false

[tool.sqlfluff.indentation]
# See https://docs.sqlfluff.com/en/stable/indentation.html
indented_joins = false
indented_ctes = true
indented_using_on = true
template_blocks_indent = true

# Some rules can be configured directly from the config common to other rules
[tool.sqlfluff.rules]
tab_space_size = 4
max_line_length = 80
indent_unit = "space"
comma_style = "trailing"
allow_scalar = true
single_table_references = "consistent"
unquoted_identifiers_policy = "all"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
